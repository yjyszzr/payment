<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.dl.shop.payment.dao.UserWithdrawMapper">
  <resultMap id="BaseResultMap" type="com.dl.shop.payment.model.UserWithdraw">
    <!--
      WARNING - @mbg.generated
    -->
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="withdrawal_sn" jdbcType="VARCHAR" property="withdrawalSn" />
    <result column="user_id" jdbcType="INTEGER" property="userId" />
    <result column="amount" jdbcType="DECIMAL" property="amount" />
    <result column="account_id" jdbcType="INTEGER" property="accountId" />
    <result column="add_time" jdbcType="INTEGER" property="addTime" />
    <result column="status" jdbcType="BIT" property="status" />
    <result column="real_name" jdbcType="VARCHAR" property="realName" />
    <result column="card_no" jdbcType="VARCHAR" property="cardNo" />
    <result column="pay_time" jdbcType="INTEGER" property="payTime" />
    <result column="payment_id" jdbcType="VARCHAR" property="paymentId" />
    <result column="bank_name" jdbcType="VARCHAR" property="bankName" />
    <result column="pay_for_code" jdbcType="INTEGER" property="payForCode" />
    
    
  </resultMap>
  
  <insert id="insertUserWithdraw"  parameterType="com.dl.shop.payment.model.UserWithdraw">
     INSERT INTO dl_user_withdraw(withdrawal_sn,user_id,amount,add_time,status,real_name,card_no,bank_name)
     VALUES(#{withdrawalSn},#{userId},#{amount},#{addTime},#{status},#{realName},#{cardNo},#{bankName})
  </insert>
  
  <update id="updateUserWithdrawBySelective" parameterType="com.dl.shop.payment.model.UserWithdraw">
   	 UPDATE dl_user_withdraw
		 <trim prefix="set" suffixOverrides=",">
		  <if test="status!=null">status=#{status},</if>
		  <if test="payTime!=null">pay_time=#{payTime},</if>
		  <if test="paymentId!=null">payment_id=#{paymentId},</if>
		 </trim>
	 WHERE withdrawal_sn = #{withdrawalSn}  
  </update>
  <update id="updateUserWithdrawStatus3To1" parameterType="com.dl.shop.payment.model.UserWithdraw">
   	 UPDATE dl_user_withdraw set status = 1,pay_time=#{payTime} WHERE withdrawal_sn = #{withdrawalSn} and status=3 
  </update>
  
  <update id="updateUserWithdrawStatus3To4" parameterType="com.dl.shop.payment.model.UserWithdraw">
   	 UPDATE dl_user_withdraw set status = 4,pay_time=#{payTime} WHERE withdrawal_sn = #{withdrawalSn} and status=3 
  </update>
  <update id="updateUserWithdrawStatus0To2" parameterType="com.dl.shop.payment.model.UserWithdraw">
   	 UPDATE dl_user_withdraw set status = 2,pay_time=#{payTime} WHERE withdrawal_sn = #{withdrawalSn} and status=0 
  </update>
  <update id="updateUserWithdrawStatus0To3" parameterType="com.dl.shop.payment.model.UserWithdraw">
   	 UPDATE dl_user_withdraw set status = 3 ,pay_for_code =#{payForCode}  WHERE withdrawal_sn = #{withdrawalSn} and status=0 
  </update>
  <update id="updateUserWithdrawStatus0To4" parameterType="com.dl.shop.payment.model.UserWithdraw">
   	 UPDATE dl_user_withdraw set status = 4,pay_time=#{payTime} WHERE withdrawal_sn = #{withdrawalSn} and status=0 
  </update>
  <update id="batchUpdateUserWithDrawSuccess">
  	 <foreach collection="userWithdrawSns" separator=";" item="userWithDrawsn">
   	 UPDATE dl_user_withdraw set status = 1,pay_time=UNIX_TIMESTAMP(now()) WHERE withdrawal_sn = #{userWithDrawsn} and status=0 
   	 </foreach>
  </update>
  <update id="batchUpdateUserWithDrawFail">
  	 <foreach collection="userWithdrawSns" separator=";" item="userWithDrawsn">
   	 UPDATE dl_user_withdraw set status = 4,pay_time=UNIX_TIMESTAMP(now()) WHERE withdrawal_sn = #{userWithDrawsn} and status=0 
   	 </foreach>
  </update>
  
  
  
  
  <select id="queryUserWithdrawBySelective" parameterType="com.dl.shop.payment.model.UserWithdraw" resultMap="BaseResultMap">
  	 select * from dl_user_withdraw 
  	 <where>
	  	<if test="userId != null">
	        AND user_id = #{userId}
	    </if>
	    <if test="withdrawalSn != null">
	        AND withdrawal_sn = #{withdrawalSn}
	    </if>

	    <if test="status != null">
	        AND status = #{status}
	    </if>
	    <if test="accountId != null">
	        AND account_id = #{accountId}
	    </if>
	    <if test="id != null">
	        AND id = #{id}
	    </if>
	     <if test="paymentId!=null">
	        AND payment_id = #{paymentId}
	    </if>
    </where>
    order by add_time
  </select>
  
  <select id="queryUserWithdrawByWithDrawSnAndUserId" parameterType="com.dl.shop.payment.model.UserWithdraw" resultMap="BaseResultMap">
  	 select * from dl_user_withdraw 
  	 where
  	 user_id = #{userId}
  	 AND withdrawal_sn = #{withdrawalSn}
  </select>
  
  <select id = "countUserWithdrawByUserId" resultType="java.lang.Integer">
  	 select count(1) from dl_user_withdraw 
  	 where user_id = #{userId} and status != '2' and FROM_UNIXTIME(add_time,"%Y-%m-%d") = curdate();
  </select>
  <select id="queryUserWithdrawIng" resultMap="BaseResultMap">
  	select * from dl_user_withdraw where status = 3;
  </select>
  
  <select id="getUserMoneyPaidForNoCheck" resultType="double">
  	select value from dl_sys_config where business_id = 5
  </select>
  <select id="getMaxNoCheckMoney" resultType="double">
  	select value from dl_sys_config where business_id = 6
  </select>
  <select id="getThirdPayForType" resultType="Integer">
  	select value from dl_sys_config where business_id = 15
  </select>
  <select id="queryWithDarwPersonOpen" resultType="java.lang.Integer">
    select value from dl_sys_config where business_id=12
  </select>
  
</mapper>